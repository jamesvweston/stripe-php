<?php

namespace jamesvweston\Stripe\Responses;


/**
 * Class Subscription
 * @see https://stripe.com/docs/api#subscription_object
 * @package jamesvweston\Stripe\Responses
 */
class Subscription extends BaseObject
{

    /**
     * A non-negative decimal between 0 and 100, with at most two decimal places.
     * This represents the percentage of the subscription invoice subtotal that will be transferred to the application ownerâ€™s Stripe account.
     * @var float|null
     */
    protected $application_fee_percent;

    /**
     * Either charge_automatically, or send_invoice
     * When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer.
     * When sending an invoice, Stripe will email your customer an invoice with payment instructions
     * @var string
     */
    protected $billing;

    /**
     * Determines the date of the first full invoice, and the day of the month
     * for subsequent invoices (for plans with month or year intervals).
     * @var string
     */
    protected $billing_cycle_anchor;

    /**
     * If the subscription has been canceled with the at_period_end flag set to true,
     * cancel_at_period_end on the subscription will be true. You can use this attribute to
     * determine whether a subscription that has a status of active is scheduled to be canceled at
     * the end of the current period.
     * @var bool
     */
    protected $cancel_at_period_end;

    /**
     * If the subscription has been canceled, the date of that cancellation. If the subscription was
     * canceled with cancel_at_period_end, canceled_at will still reflect the date of the initial
     * cancellation request, not the end of the subscription period when the subscription is
     * automatically moved to a canceled state.
     * @var int|null
     */
    protected $canceled_at;

    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     * @var int
     */
    protected $created;

    /**
     * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
     * @var int
     */
    protected $current_period_end;

    /**
     * Start of the current period that the subscription has been invoiced for.
     * @var int
     */
    protected $current_period_start;

    /**
     * ID of the customer who owns the subscription.
     * @var string
     */
    protected $customer;

    /**
     * Number of days a customer has to pay invoices generated by this subscription.
     * This value will be null for subscriptions where billing=charge_automatically
     * @var int|null
     */
    protected $days_until_due;

    /**
     * Describes the current discount applied to this subscription, if there is one.
     * When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
     * @var Discount|null
     */
    protected $discount;

    /**
     * If the subscription has ended, the date the subscription ended.
     * @var int|null
     */
    protected $ended_at;

    /**
     * @var SubscriptionItemCollection
     */
    protected $items;

    /**
     * Hash describing the plan the customer is subscribed to.
     * @var Plan
     */
    protected $plan;

    /**
     * The quantity of the plan to which the customer should be subscribed. For example, if your plan
     * is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have
     * the customer charged $50 (5 x $10) monthly.
     * @var int
     */
    protected $quantity;

    /**
     * Date the most recent update to this subscription started.
     * @var int
     */
    protected $start;

    /**
     * Possible values are trialing, active, past_due, canceled, or unpaid. A subscription still in
     * its trial period is trialing and moves to active when the trial period is over. If subscription
     * billing=charge_automatically it becomes past_due when payment to renew it fails and canceled
     * or unpaid (depending on your subscriptions settings) when Stripe has exhausted all payment
     * retry attempts. If subscription billing=send_invoice it becomes past_due when its invoice is
     * not paid by the due date, and canceled or unpaid if it is still not paid by an additional
     * deadline after that. Note that when a subscription has a status of unpaid, no subsequent
     * invoices will be attempted (invoices will be created, but then immediately automatically
     * closed.) After receiving updated payment information from a customer, you may choose to
     * reopen and pay their closed invoices.
     * @var string
     */
    protected $status;

    /**
     * If provided, each invoice created by this subscription will apply the tax rate, increasing the amount billed to the customer.
     * @var float|null
     */
    protected $tax_percent;

    /**
     * If the subscription has a trial, the end of that trial.
     * @var int|null
     */
    protected $trial_end;

    /**
     * If the subscription has a trial, the beginning of that trial.
     * @var int|null
     */
    protected $trial_start;

    /**
     * @return float|null
     */
    public function getApplicationFeePercent(): ?float
    {
        return $this->application_fee_percent;
    }

    /**
     * @param float|null $application_fee_percent
     */
    public function setApplicationFeePercent(?float $application_fee_percent): void
    {
        $this->application_fee_percent = $application_fee_percent;
    }

    /**
     * @return string
     */
    public function getBilling(): string
    {
        return $this->billing;
    }

    /**
     * @param string $billing
     */
    public function setBilling(string $billing): void
    {
        $this->billing = $billing;
    }

    /**
     * @return string
     */
    public function getBillingCycleAnchor(): string
    {
        return $this->billing_cycle_anchor;
    }

    /**
     * @param string $billing_cycle_anchor
     */
    public function setBillingCycleAnchor(string $billing_cycle_anchor): void
    {
        $this->billing_cycle_anchor = $billing_cycle_anchor;
    }

    /**
     * @return bool
     */
    public function isCancelAtPeriodEnd(): bool
    {
        return $this->cancel_at_period_end;
    }

    /**
     * @param bool $cancel_at_period_end
     */
    public function setCancelAtPeriodEnd(bool $cancel_at_period_end): void
    {
        $this->cancel_at_period_end = $cancel_at_period_end;
    }

    /**
     * @return int|null
     */
    public function getCanceledAt(): ?int
    {
        return $this->canceled_at;
    }

    /**
     * @param int|null $canceled_at
     */
    public function setCanceledAt(?int $canceled_at): void
    {
        $this->canceled_at = $canceled_at;
    }

    /**
     * @return int
     */
    public function getCreated(): int
    {
        return $this->created;
    }

    /**
     * @param int $created
     */
    public function setCreated(int $created): void
    {
        $this->created = $created;
    }

    /**
     * @return int
     */
    public function getCurrentPeriodEnd(): int
    {
        return $this->current_period_end;
    }

    /**
     * @param int $current_period_end
     */
    public function setCurrentPeriodEnd(int $current_period_end): void
    {
        $this->current_period_end = $current_period_end;
    }

    /**
     * @return int
     */
    public function getCurrentPeriodStart(): int
    {
        return $this->current_period_start;
    }

    /**
     * @param int $current_period_start
     */
    public function setCurrentPeriodStart(int $current_period_start): void
    {
        $this->current_period_start = $current_period_start;
    }

    /**
     * @return string
     */
    public function getCustomer(): string
    {
        return $this->customer;
    }

    /**
     * @param string $customer
     */
    public function setCustomer(string $customer): void
    {
        $this->customer = $customer;
    }

    /**
     * @return int|null
     */
    public function getDaysUntilDue(): ?int
    {
        return $this->days_until_due;
    }

    /**
     * @param int|null $days_until_due
     */
    public function setDaysUntilDue(?int $days_until_due): void
    {
        $this->days_until_due = $days_until_due;
    }

    /**
     * @return Discount|null
     */
    public function getDiscount(): ?Discount
    {
        return $this->discount;
    }

    /**
     * @param Discount|null $discount
     */
    public function setDiscount(?Discount $discount): void
    {
        $this->discount = $discount;
    }

    /**
     * @return int|null
     */
    public function getEndedAt(): ?int
    {
        return $this->ended_at;
    }

    /**
     * @param int|null $ended_at
     */
    public function setEndedAt(?int $ended_at): void
    {
        $this->ended_at = $ended_at;
    }

    /**
     * @return SubscriptionItemCollection
     */
    public function getItems(): SubscriptionItemCollection
    {
        return $this->items;
    }

    /**
     * @param SubscriptionItemCollection $items
     */
    public function setItems(SubscriptionItemCollection $items): void
    {
        $this->items = $items;
    }

    /**
     * @return Plan
     */
    public function getPlan(): Plan
    {
        return $this->plan;
    }

    /**
     * @param Plan $plan
     */
    public function setPlan(Plan $plan): void
    {
        $this->plan = $plan;
    }

    /**
     * @return int
     */
    public function getQuantity(): int
    {
        return $this->quantity;
    }

    /**
     * @param int $quantity
     */
    public function setQuantity(int $quantity): void
    {
        $this->quantity = $quantity;
    }

    /**
     * @return int
     */
    public function getStart(): int
    {
        return $this->start;
    }

    /**
     * @param int $start
     */
    public function setStart(int $start): void
    {
        $this->start = $start;
    }

    /**
     * @return string
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * @param string $status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * @return float|null
     */
    public function getTaxPercent(): ?float
    {
        return $this->tax_percent;
    }

    /**
     * @param float|null $tax_percent
     */
    public function setTaxPercent(?float $tax_percent): void
    {
        $this->tax_percent = $tax_percent;
    }

    /**
     * @return int|null
     */
    public function getTrialEnd(): ?int
    {
        return $this->trial_end;
    }

    /**
     * @param int|null $trial_end
     */
    public function setTrialEnd(?int $trial_end): void
    {
        $this->trial_end = $trial_end;
    }

    /**
     * @return int|null
     */
    public function getTrialStart(): ?int
    {
        return $this->trial_start;
    }

    /**
     * @param int|null $trial_start
     */
    public function setTrialStart(?int $trial_start): void
    {
        $this->trial_start = $trial_start;
    }

}
