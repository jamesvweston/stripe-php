<?php

namespace jamesvweston\Stripe\Requests;


/**
 * Class CreatePlanRequest
 * @see https://stripe.com/docs/api#create_plan
 * @package jamesvweston\Stripe\Requests
 */
class CreatePlanRequest implements \JsonSerializable
{

    /**
     * An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer.
     * You can optionally override this ID, but the ID must be unique across all plans in your Stripe account.
     * You can, however, use the same plan ID in both live and test modes.
     * @var string|null
     */
    protected $id;

    /**
     * Required
     * @var string
     */
    protected $currency;

    /**
     * Specifies billing frequency. Either day, week, month or year
     * @var string
     */
    protected $interval;

    /**
     * The product whose pricing the created plan will represent.
     * This can either be the ID of an existing product, or a dictionary containing fields used to create a service product
     * @var CreateProductRequest|string
     */
    protected $product;

    /**
     * Whether the plan is currently available for new subscriptions. Defaults to true
     * @var bool|null
     */
    protected $active;

    /**
     * Specifies a usage aggregation strategy for plans of usage_type=metered. Allowed values are sum for summing up all usage during a period, last_during_period for picking the last usage record reported within a period, last_ever for picking the last usage record ever (across period bounds) or max which picks the usage record with the maximum reported usage during a period. Defaults to sum.
     * @var string|null
     */
    protected $aggregate_usage;

    /**
     * A positive integer in cents (or 0 for a free plan) representing how much to charge on a recurring basis. Either amount or tiers is required.
     * @var int|null
     */
    protected $amount;

    /**
     * Describes how to compute the price per period. Either per_unit or tiered.
     * per_unit indicates that the fixed amount (specified in amount) will be charged per unit in quantity (for plans with usage_type=licensed), or per unit of total usage (for plans with usage_type=metered). tiered indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.
     * @var string|null
     */
    protected $billing_scheme;

    /**
     * The number of intervals between subscription billings. For example, interval=month and interval_count=3 bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
     * @var int|null
     */
    protected $interval_count;

    /**
     * @var array|null
     */
    protected $metadata;

    /**
     * @var string|null
     */
    protected $nickname;

    /**
     * @var array|null
     */
    protected $tiers;

    /**
     * @var string|null
     */
    protected $tiers_mode;


    protected $transform_usage;

    /**
     * Default number of trial days when subscribing a customer to this plan using trial_from_plan=true
     * @var string|null
     */
    protected $trial_period_days;

    /**
     * Configures how the quantity per period should be determined, can be either metered or licensed. licensed will automatically bill the quantity set for a plan when adding it to a subscription, metered will aggregate the total usage based on usage records. Defaults to licensed
     * @var string|null
     */
    protected $usage_type;


    /**
     * @return array
     */
    public function jsonSerialize()
    {
        $object['id']                       = $this->id;
        $object['currency']                 = $this->currency;
        $object['interval']                 = $this->interval;
        $object['product']                  = $this->product instanceof \JsonSerializable ? $this->product->jsonSerialize() : $this->product;
        $object['active']                   = $this->active;
        $object['aggregate_usage']          = $this->aggregate_usage;
        $object['amount']                   = $this->amount;
        $object['billing_scheme']           = $this->billing_scheme;
        $object['interval_count']           = $this->interval_count;
        $object['metadata']                 = $this->metadata;
        $object['nickname']                 = $this->nickname;
        $object['tiers']                    = $this->tiers instanceof  \JsonSerializable ? $this->tiers->jsonSerialize() : $this->tiers;
        $object['tiers_mode']               = $this->tiers_mode;
        $object['transform_usage']          = $this->transform_usage instanceof  \JsonSerializable ? $this->transform_usage->jsonSerialize() : $this->transform_usage;
        $object['trial_period_days']        = $this->trial_period_days;
        $object['usage_type']               = $this->usage_type;

        return $object;
    }

    /**
     * @return null|string
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * @param null|string $id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * @return string
     */
    public function getCurrency(): string
    {
        return $this->currency;
    }

    /**
     * @param string $currency
     */
    public function setCurrency(string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * @return string
     */
    public function getInterval(): string
    {
        return $this->interval;
    }

    /**
     * @param string $interval
     */
    public function setInterval(string $interval): void
    {
        $this->interval = $interval;
    }

    /**
     * @return CreateProductRequest|string
     */
    public function getProduct()
    {
        return $this->product;
    }

    /**
     * @param CreateProductRequest|string $product
     */
    public function setProduct($product): void
    {
        $this->product = $product;
    }

    /**
     * @return bool|null
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * @param bool|null $active
     */
    public function setActive(?bool $active): void
    {
        $this->active = $active;
    }

    /**
     * @return null|string
     */
    public function getAggregateUsage(): ?string
    {
        return $this->aggregate_usage;
    }

    /**
     * @param null|string $aggregate_usage
     */
    public function setAggregateUsage(?string $aggregate_usage): void
    {
        $this->aggregate_usage = $aggregate_usage;
    }

    /**
     * @return int|null
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * @param int|null $amount
     */
    public function setAmount(?int $amount): void
    {
        $this->amount = $amount;
    }

    /**
     * @return null|string
     */
    public function getBillingScheme(): ?string
    {
        return $this->billing_scheme;
    }

    /**
     * @param null|string $billing_scheme
     */
    public function setBillingScheme(?string $billing_scheme): void
    {
        $this->billing_scheme = $billing_scheme;
    }

    /**
     * @return int|null
     */
    public function getIntervalCount(): ?int
    {
        return $this->interval_count;
    }

    /**
     * @param int|null $interval_count
     */
    public function setIntervalCount(?int $interval_count): void
    {
        $this->interval_count = $interval_count;
    }

    /**
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * @param array|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * @return null|string
     */
    public function getNickname(): ?string
    {
        return $this->nickname;
    }

    /**
     * @param null|string $nickname
     */
    public function setNickname(?string $nickname): void
    {
        $this->nickname = $nickname;
    }

    /**
     * @return array|null
     */
    public function getTiers(): ?array
    {
        return $this->tiers;
    }

    /**
     * @param array|null $tiers
     */
    public function setTiers(?array $tiers): void
    {
        $this->tiers = $tiers;
    }

    /**
     * @return null|string
     */
    public function getTiersMode(): ?string
    {
        return $this->tiers_mode;
    }

    /**
     * @param null|string $tiers_mode
     */
    public function setTiersMode(?string $tiers_mode): void
    {
        $this->tiers_mode = $tiers_mode;
    }

    /**
     * @return mixed
     */
    public function getTransformUsage()
    {
        return $this->transform_usage;
    }

    /**
     * @param mixed $transform_usage
     */
    public function setTransformUsage($transform_usage): void
    {
        $this->transform_usage = $transform_usage;
    }

    /**
     * @return null|string
     */
    public function getTrialPeriodDays(): ?string
    {
        return $this->trial_period_days;
    }

    /**
     * @param null|string $trial_period_days
     */
    public function setTrialPeriodDays(?string $trial_period_days): void
    {
        $this->trial_period_days = $trial_period_days;
    }

    /**
     * @return null|string
     */
    public function getUsageType(): ?string
    {
        return $this->usage_type;
    }

    /**
     * @param null|string $usage_type
     */
    public function setUsageType(?string $usage_type): void
    {
        $this->usage_type = $usage_type;
    }

}